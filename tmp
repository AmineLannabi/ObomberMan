open Graphics
open Gtypes
open Ig
open Unix

(** declaration de la grille de jeur **)
let grille = 
  [|
    [|'='; '='; '='; '='; '='; '='; '='; '='; '='; '='|];
    [|'='; ' '; ' '; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; '='; ' '; ' '; 'x'; ' '; ' '; ' '; '='|];
    [|'='; ' '; ' '; '='; ' '; '='; 'x'; '='; ' '; '='|];
    [|'='; ' '; 'x'; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; '='; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; 'x'; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; '='; ' '; ' '; 'x'; ' '; '='; ' '; '='|];
    [|'='; ' '; ' '; '='; ' '; ' '; '='; ' '; ' '; '='|];
    [|'='; '='; '='; '='; '='; '='; '='; '='; '='; '='|];
  |]
let bombers = [ ("bleu", 1, 1, "sud"); ("vert", 7, 1, "sud")]

let ouvrir_fenetre () =
  init 92 72 10 10

let case_to_coord i j =
  (92/2)+(j*92), (72/2)+(i*72)

let coord_x_to_case x =
  x/92
let coord_y_to_case y =
  y/72

(** convertit string en couleur **)
let couleur_of_string s = 
  match s with
  | "bleu" -> Bleu
  | "rouge" -> Rouge
  | "vert" -> Vert
  | "violet" -> Violet
  | _ -> assert false

(** convertit couleur en string **)
let couleur_to_string c = 
  match c with
  | Bleu -> "bleu"
  | Rouge -> "rouge"
  | Vert -> "vert"
  | Violet -> "violet"

(** convertit string en direction **)
let dir_of_string s = 
  match s with
  | "sud" -> Sud
  | "nord" -> Nord
  | "est" -> Est
  | "ouest" -> Ouest

(** prochaine case: i j depuis: direction et coordonnées fenetre **)
let prochaine_case x y dir =
  match dir with
  | Nord -> (coord_x_to_case x) +1, coord_y_to_case y;
  | Sud -> (coord_x_to_case x)-1, coord_x_to_case y;
  | Est -> coord_x_to_case x, (coord_y_to_case y)+1;
  | Ouest -> coord_x_to_case x, (coord_y_to_case y)-1

(** construction d'un bomberman depuis (string*int*int*string) **)
let build_bomber (c, i, j, d) = 
  Bomberman {
    x = fst(case_to_coord i j);
    y = snd(case_to_coord i j);
    couleur = couleur_of_string c;
    dir = dir_of_string d;
    etat = Vivant;
    pas = None} 

(** construction d'un bomberman depuis (couleur*int*int*dir) **)
let build_bomber2 (c, i , j, d) = 
  Bomberman {
    x = fst(case_to_coord i j);
    y = snd(case_to_coord i j);
    couleur = c;
    dir = d;
    etat = Vivant;
    pas = None}

let sprite_bomber = List.map build_bomber bombers

(** affichage des bombermens **)
let affichage_bombermen_depart () =
  let l = List.map build_bomber bombers in
  List.iter affiche_sprite l;
  affiche();
  synchronize()

(** affichage d'une bombe jusqu'à son explosion **)
let rec affiche_explosion bombe =
  let sprite_bombe = Bombe {b_i = bombe.b_i;b_j = bombe.b_j;b_duree = bombe.b_duree} in
  affiche_sprite sprite_bombe;
  affiche();
  sleep(1);
  if bombe.b_duree > 0 then
    (efface_sprite sprite_bombe;
     affiche();
     affiche_explosion ({b_i = bombe.b_i;b_j = bombe.b_j;b_duree = bombe.b_duree - 1}));
  sleep(1);
  efface_sprite sprite_bombe;
  affiche()

(** mise en place de l'arene au départ du jeu **)
let dessiner_arene m l = 
  List.map (function (c,i,j,d) -> Printf.printf "%s %d %d %s\n%!" c i j d) l;
  for i = 0 to 9 do
    for j = 0 to 9 do
      begin
        match m.(i).(j) with
        | ' ' -> let sprite_sol = Sol (j , 9-i) in 
          affiche_sprite sprite_sol;
          Printf.printf " %!";
        | '=' -> let sprite_bloc = Bloc {blk_i = j; blk_j = 9-i;  blk_forme = Incassable } in
          affiche_sprite sprite_bloc;
          affiche();
          Printf.printf "=%!";
        | 'x' -> let sprite_bloc = Bloc {blk_i = j; blk_j = 9-i; blk_forme = Cassable(Intact) } in
          affiche_sprite sprite_bloc;
          affiche();
          Printf.printf "x%!";
        | _ -> ();
      end
    done;
    Printf.printf "\n";
  done;
  affiche();
  synchronize()

let affiche_taille l = 
  Printf.printf "%d\n" (List.length l)

(** deplacement d'un bomberman **)
let deplacement coul m =
  let joueur = List.find (fun s -> match s with
      | Bomberman(_) -> true 
      | _ -> false) sprite_bomber in
  let x = ref joueur.x in
  let y = ref joueur.y in
  if touche_pressee() then
    (match lecture_touche() with
     | 'z' -> let proch_case = prochaine_case !x !y Nord in
       while (m.(fst(proch_case)).(snd(proch_case)) == ' ')
       do
         y := !y+5;
         (couleur_to_string coul, !y, !x, "nord") :: bombers;
         (* efface_sprite joueur; *)
         let joueur = build_bomber2 (coul, !x, !y, Nord) in
         efface_sprite joueur;
         affiche_sprite joueur;
       done;
     |  'd' -> let proch_case = prochaine_case !x !y Est in
       while (m.(fst(proch_case)).(snd(proch_case)) == ' ')
       do
         x := !x+5;
         (couleur_to_string coul, !y, !x, "est") :: bombers;
         (* efface_sprite joueur; *)
         let joueur = build_bomber2 (coul, !x, !y, Est) in
         affiche_sprite joueur;
       done;
     |  'q' -> let proch_case = prochaine_case !x !y Ouest in
       while (m.(fst(proch_case)).(snd(proch_case)) == ' ')
       do
         x := !x-5;
         (couleur_to_string coul, !y, !x, "ouest") :: bombers;
         (* efface_sprite joueur; *)
         let joueur = build_bomber2 (coul, !x, !y, Ouest) in
         affiche_sprite joueur;
       done;
     |  's' -> let proch_case = prochaine_case !x !y Sud in
       while (m.(fst(proch_case)).(snd(proch_case)) == ' ')
       do
         y := !y-5;
         (couleur_to_string coul, !y, !x, "sud") :: bombers;
         (* efface_sprite joueur; *)
         let joueur = build_bomber2 (coul, !x, !y, Sud) in
         affiche_sprite joueur;
       done;
     | 'b' -> let bombe = Bombe { b_i=coord_y_to_case j;b_j=coord_x_to_case i;b_duree=15} in
       affiche_explosion bombe;
    );
  affiche()

let () =
  auto_synchronize false;
  ouvrir_fenetre();
  dessiner_arene grille bombers;
  affichage_bombermen_depart();
  let bombe = {b_i=7;b_j=3;b_duree=15} in
  affiche_explosion bombe;
  while true do
    if touche_pressee() then
      (match lecture_touche() with
       | 'e' -> Printf.printf "e%!";
       | 'o' -> close_graph () 
       |  _  -> ())
  done;
  ignore (read_key ())
