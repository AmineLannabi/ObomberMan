open Graphics
open Gtypes
open Ig
open Unix

(** declaration de la grille de jeu **)
let grille = 
  [|
    [|'='; '='; '='; '='; '='; '='; '='; '='; '='; '='|];
    [|'='; ' '; ' '; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; '='; ' '; ' '; 'x'; ' '; ' '; ' '; '='|];
    [|'='; ' '; ' '; '='; ' '; '='; 'x'; '='; ' '; '='|];
    [|'='; ' '; 'x'; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; '='; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; 'x'; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; '='; ' '; ' '; 'x'; ' '; '='; ' '; '='|];
    [|'='; ' '; ' '; '='; ' '; ' '; '='; ' '; ' '; '='|];
    [|'='; '='; '='; '='; '='; '='; '='; '='; '='; '='|];
  |]
(** liste de joueur **)
let bombers = [ ("bleu", 1, 1, "sud"); ("vert", 7, 1, "sud");("rouge", 7, 4, "sud"); ("violet", 3, 7, "sud")]

let ouvrir_fenetre () =
  init 92 72 10 10

let case_to_coord i j =
  46+(j*92), 36+(i*72)

let coord_x_to_case x =
  x/92
let coord_y_to_case y =
  y/72

(** convertit string en couleur **)
let couleur_of_string s = 
  match s with
  | "bleu" -> Bleu
  | "rouge" -> Rouge
  | "vert" -> Vert
  | "violet" -> Violet
  | _ -> assert false

(** convertit couleur en string **)
let couleur_to_string c = 
  match c with
  | Bleu -> "bleu"
  | Rouge -> "rouge"
  | Vert -> "vert"
  | Violet -> "violet"

(** convertit string en direction **)
let dir_of_string s = 
  match s with
  | "sud" -> Sud
  | "nord" -> Nord
  | "est" -> Est
  | "ouest" -> Ouest

(** prochaine case: i j depuis: direction et coordonnées fenetre **)
let prochaine_case x y dir =
  match dir with
  | Nord -> 9-coord_y_to_case (y+36), coord_x_to_case x;
  | Sud -> 9-coord_y_to_case (y-36), coord_x_to_case x;
  | Est -> 9-coord_y_to_case y, coord_x_to_case (x+50);
  | Ouest -> 9-coord_y_to_case y, coord_x_to_case (x-50)

(** prochaine case: i j depuis: direction et coordonnées fenetre **)
let prochaine_case_ij i j dir =
  match dir with
  | Nord -> i-1, j;
  | Sud -> i+1, j;
  | Est -> i, j-1;
  | Ouest -> i, j+1

(** construction d'un bomberman depuis (string*int*int*string) **)
let build_bomber (c, i, j, d) = 
  Bomberman {
    x = fst(case_to_coord i j);
    y = snd(case_to_coord i j);
    couleur = couleur_of_string c;
    dir = dir_of_string d;
    etat = Vivant;
    pas = None} 

(** construction d'un bomberman depuis (couleur*int*int*dir) **)
let build_bomber2 (c, i , j, d) = 
  Bomberman {
    x = i;
    y = j;
    couleur = c;
    dir = d;
    etat = Vivant;
    pas = None}

(** fonction resursive d'affichage des flammes par direction **)


(** fonction d'affichage des flammes **)


(** affichage arene sur console **)
let affiche_arene m l =
  List.map (function (c,i,j,d) -> Printf.printf "%s %d %d %s\n%!" c i j d) l;
  for i = 0 to 9 do
    for j = 0 to 9 do
      begin
        match m.(i).(j) with
        | ' ' -> Printf.printf " %!";
        | '=' -> Printf.printf "=%!";
        | 'x' -> Printf.printf "x%!";
        | _ -> ();
      end
    done;
    Printf.printf "\n";
  done;
  Printf.printf "\n"

(** mise en place de l'arene au départ du jeu **)
let dessiner_arene m l = 
  List.map (function (c,i,j,d) -> Printf.printf "%s %d %d %s\n%!" c i j d) l;
  for i = 0 to 9 do
    for j = 0 to 9 do
      begin
        match m.(i).(j) with
        | ' ' -> let sprite_sol = Sol (j , 9-i) in 
          affiche_sprite sprite_sol;
          Printf.printf " %!";
        | '=' -> let sprite_bloc = Bloc {blk_i = j; blk_j = 9-i;  blk_forme = Incassable } in
          affiche_sprite sprite_bloc;
          affiche();
          Printf.printf "=%!";
        | 'x' -> let sprite_bloc = Bloc {blk_i = j; blk_j = 9-i; blk_forme = Cassable(Intact) } in
          affiche_sprite sprite_bloc;
          affiche();
          Printf.printf "x%!";
        | _ -> ();
      end
    done;
    Printf.printf "\n";
  done;
  Printf.printf "\n";
  let l = List.map build_bomber bombers in
  List.iter affiche_sprite l;
  affiche()

let maj_pos_joueur x y coul =
  let couleur = couleur_to_string coul in
  List.map (fun (a,b,c,d) -> if a = couleur then (a,(coord_y_to_case y), (coord_x_to_case x), "sud") else (a,b,c,d)) bombers

let rec mouvement x y m joueur coul dir decr =
  match dir with
  | Nord -> let proch_case = prochaine_case !x !y Nord in
    if (m.(fst(proch_case)).(snd(proch_case)) == ' ' && !decr > 0) then 
      begin
        efface_sprite joueur;
        let joueur2 = build_bomber2 (coul, !x, (!y+5), Nord) in
        affiche_sprite joueur2;
        affiche();
        sleepf(1./.30.);
        y := !y + 5;
        decr := !decr -1;
        mouvement x y m joueur2 coul Nord decr;
      end
  | Sud -> let proch_case = prochaine_case !x !y Sud in
    if (m.(fst(proch_case)).(snd(proch_case)) == ' ' && !decr > 0) then 
      begin
        efface_sprite joueur;
        let joueur2 = build_bomber2 (coul, !x, (!y-5), Sud) in
        affiche_sprite joueur2;
        affiche();
        sleepf(1./.30.);
        y := !y - 5;
        decr := !decr -1;
        mouvement x y m joueur2 coul Sud decr;
      end
  | Est -> let proch_case = prochaine_case !x !y Est in
    if (m.(fst(proch_case)).(snd(proch_case)) == ' ' && !decr > 0) then 
      begin
        efface_sprite joueur;
        let joueur2 = build_bomber2 (coul,(!x+5), !y, Est) in
        affiche_sprite joueur2;
        affiche();
        sleepf(1./.30.);
        x := !x + 5;
        decr := !decr -1;
        mouvement x y m joueur2 coul Est decr;
      end
  | Ouest -> let proch_case = prochaine_case !x !y Ouest in
    if (m.(fst(proch_case)).(snd(proch_case)) == ' ' && !decr > 0) then 
      begin
        efface_sprite joueur;
        let joueur2 = build_bomber2 (coul, (!x-5), !y, Ouest) in
        affiche_sprite joueur2;
        affiche();
        sleepf(1./.30.);
        x := !x - 5;
        decr := !decr -1;
        mouvement x y m joueur2 coul Ouest decr;
      end

(** controle d'un bomberman **)
let rec controle coul m bombers =
  let sprite_bomber = List.map build_bomber bombers in
  let joueur = List.find (fun s ->  match s with | Bomberman(r) -> r.couleur = coul | _ -> false) sprite_bomber in
  let Bomberman(r) = joueur in
  let x = ref r.x in
  let y = ref r.y in
  (match lecture_touche() with
   | 'z' -> let descr = ref 15 in
     mouvement x y m joueur coul Nord descr
   | 'd' -> let descr = ref 20 in
     mouvement x y m joueur coul Est descr
   | 'q' -> let descr = ref 20 in
     mouvement x y m joueur coul Ouest descr
   | 's' -> let descr = ref 15 in
     mouvement x y m joueur coul Sud descr
   | 'b' -> let bombe_i = coord_x_to_case !x in
     let bombe_j = coord_y_to_case !y in
     let cpt = ref 15 in
     let bombe = Bombe {b_i=bombe_i;b_j=bombe_j;b_duree= !cpt} in
     while (!cpt > 0) do
       if (not(touche_pressee())) then
         begin
           sleepf(1./.5.);
           efface_sprite bombe;
           cpt := !cpt - 1;
           let bombe2 = Bombe {b_i=bombe_i;b_j=bombe_j;b_duree= !cpt} in
           affiche_sprite bombe2;
           affiche()
         end
       else
         efface_sprite bombe;
       cpt := !cpt - 1;
       let bombe2 = Bombe {b_i=bombe_i;b_j=bombe_j;b_duree= !cpt} in
       affiche_sprite bombe2;
       affiche();
       match lecture_touche() with
       | 'z' -> let descr = ref 15 in
         mouvement x y m joueur coul Nord descr
       | 'd' -> let descr = ref 20 in
         mouvement x y m joueur coul Est descr
       | 'q' -> let descr = ref 20 in
         mouvement x y m joueur coul Ouest descr
       | 's' -> let descr = ref 15 in
         mouvement x y m joueur coul Sud descr
       | 'o' -> close_graph(Printf.printf "Fin du jeu!\n")
     done
   | 'o' -> close_graph(Printf.printf "Fin du jeu!\n")
   |  _  -> ()
  );
  affiche();
  let bombers2 = maj_pos_joueur !x !y coul in
  affiche_arene m bombers2;
  controle coul m bombers2

let () =
  auto_synchronize false;
  ouvrir_fenetre();
  dessiner_arene grille bombers;
  controle Rouge grille bombers;
  ignore (read_key ())
