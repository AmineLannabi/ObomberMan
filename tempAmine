open Graphics
open Gtypes
open Ig
open Unix

(** declaration de la grille de jeu **)
let grille = 
  [|
    [|'='; '='; '='; '='; '='; '='; '='; '='; '='; '='|];
    [|'='; ' '; ' '; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; '='; ' '; ' '; 'x'; ' '; ' '; ' '; '='|];
    [|'='; ' '; ' '; '='; ' '; '='; 'x'; '='; ' '; '='|];
    [|'='; ' '; 'x'; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; '='; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; 'x'; ' '; ' '; '='; ' '; ' '; ' '; '='|];
    [|'='; ' '; '='; ' '; ' '; 'x'; ' '; '='; ' '; '='|];
    [|'='; ' '; ' '; '='; ' '; ' '; '='; ' '; ' '; '='|];
    [|'='; '='; '='; '='; '='; '='; '='; '='; '='; '='|];
  |]
(** liste de joueur **)
let bombers = [ ("bleu", 1, 1, "sud"); ("vert", 7, 1, "sud");("rouge", 7, 4, "sud"); ("violet", 3, 7, "sud")]

let ouvrir_fenetre () =
  init 92 72 10 10

let case_to_coord i j =
  (92/2)+(j*92), (72/2)+(i*72)

let coord_x_to_case x =
  x/92
let coord_y_to_case y =
  y/72

(** convertit string en couleur **)
let couleur_of_string s = 
  match s with
  | "bleu" -> Bleu
  | "rouge" -> Rouge
  | "vert" -> Vert
  | "violet" -> Violet
  | _ -> assert false

(** convertit couleur en string **)
let couleur_to_string c = 
  match c with
  | Bleu -> "bleu"
  | Rouge -> "rouge"
  | Vert -> "vert"
  | Violet -> "violet"

(** convertit string en direction **)
let dir_of_string s = 
  match s with
  | "sud" -> Sud
  | "nord" -> Nord
  | "est" -> Est
  | "ouest" -> Ouest

(** prochaine case: i j depuis: direction et coordonnées fenetre **)
let prochaine_case x y dir =
  match dir with
  | Nord -> 9-coord_y_to_case y, coord_x_to_case x;
  | Sud -> 9-coord_x_to_case y, coord_x_to_case x;
  | Est -> 9-coord_y_to_case y, coord_x_to_case x;
  | Ouest -> 9-coord_y_to_case y, coord_x_to_case x


(** construction d'un bomberman depuis (string*int*int*string) **)
let build_bomber (c, i, j, d) = 
  Bomberman {
    x = fst(case_to_coord i j);
    y = snd(case_to_coord i j);
    couleur = couleur_of_string c;
    dir = dir_of_string d;
    etat = Vivant;
    pas = None} 

(** construction d'un bomberman depuis (couleur*int*int*dir) **)
let build_bomber2 (c, i , j, d) = 
  Bomberman {
    x = i;
    y = j;
    couleur = c;
    dir = d;
    etat = Vivant;
    pas = None}

let sprite_bomber = List.map build_bomber bombers

(** affichage des bombermens **)
let affichage_bombermen_depart () =
  let l = List.map build_bomber bombers in
  List.iter affiche_sprite l;
  affiche();
  synchronize()

(** affichage d'une bombe jusqu'à son explosion **)
let rec affiche_explosion bombe joueur =
  let sprite_bombe = Bombe {b_i = bombe.b_i;b_j = bombe.b_j;b_duree = bombe.b_duree} in
  affiche_sprite sprite_bombe;
  affiche();
  sleepf(1./.5.);
  if bombe.b_duree > 0 then
    (efface_sprite sprite_bombe;
     affiche_sprite joueur;
     affiche();
     affiche_explosion ({b_i = bombe.b_i;b_j = bombe.b_j;b_duree = bombe.b_duree - 1}) joueur);
  sleepf(1./.5.);
  efface_sprite sprite_bombe;
  affiche_sprite joueur;
  affiche()

let affiche_flamme m bombe dir=
  let sprite_flammeCentrale = Flamme {  f_i=bombe.b_i;f_j=bombe.b_j;f_forme=FCroix} in
  let x = bombe.b_i in
  let y = bombe.b_j in

  affiche_sprite sprite_flammeCentrale;
  affiche();
  sleepf(1./.5.);
  match dir with
  | Nord -> let proch_case = prochaine_case x y Nord in
    if m.(fst(proch_case)).(snd(proch_case)) == ' ' then 
      begin
(*         efface_sprite joueur;
 *)        let sprite_flamme = Flamme {  f_i=bombe.b_i;f_j=(bombe.b_j + 1);f_forme=FVert} in
        affiche_sprite sprite_flamme;
        affiche();
      end
    else if (m.(fst(proch_case)).(snd(proch_case)) == '=' || m.(fst(proch_case)).(snd(proch_case)) == 'x') then
      begin 
(*         efface_sprite joueur;
 *)        let sprite_flamme = Flamme {  f_i=bombe.b_i;f_j=(bombe.b_j + 1);f_forme=FHaut} in
        affiche_sprite sprite_flamme;
        affiche();
      end
  | Sud -> let proch_case = prochaine_case x y Sud in
    if m.(fst(proch_case)).(snd(proch_case)) == ' ' then 
      begin
(*         efface_sprite joueur;
 *)        let sprite_flamme = Flamme {  f_i=bombe.b_i;f_j=(bombe.b_j - 1);f_forme=FVert} in
        affiche_sprite sprite_flamme;
        affiche();
      end
    else if (m.(fst(proch_case)).(snd(proch_case)) == '=' || m.(fst(proch_case)).(snd(proch_case)) == 'x') then
      begin 
(*         efface_sprite joueur;
 *)        let sprite_flamme = Flamme {  f_i=bombe.b_i;f_j=(bombe.b_j - 1);f_forme=FBas} in
        affiche_sprite sprite_flamme;
        affiche();
      end
  | Est -> let proch_case = prochaine_case x y Est in
    if m.(fst(proch_case)).(snd(proch_case)) == ' ' then 
      begin
(*         efface_sprite joueur;
 *)        let sprite_flamme = Flamme {  f_i=bombe.b_i;f_j=(bombe.b_j + 1);f_forme=FHoriz} in
        affiche_sprite sprite_flamme;
        affiche();
      end
    else if (m.(fst(proch_case)).(snd(proch_case)) == '=' || m.(fst(proch_case)).(snd(proch_case)) == 'x') then
      begin 
(*         efface_sprite joueur;
 *)        let sprite_flamme = Flamme {  f_i=bombe.b_i;f_j=(bombe.b_j + 1);f_forme=FDroite} in
        affiche_sprite sprite_flamme;
        affiche();
      end
  | Ouest -> let proch_case = prochaine_case x y Ouest in
    if m.(fst(proch_case)).(snd(proch_case)) == ' ' then
      begin
(*         efface_sprite joueur;
 *)        let sprite_flamme = Flamme {  f_i=bombe.b_i;f_j=(bombe.b_j - 1);f_forme=FHoriz} in
        affiche_sprite sprite_flamme;
        affiche();
      end

    else if (m.(fst(proch_case)).(snd(proch_case)) == '=' || m.(fst(proch_case)).(snd(proch_case)) == 'x') then
      begin 
(*         efface_sprite joueur;
 *)        let sprite_flamme = Flamme {  f_i=bombe.b_i;f_j=(bombe.b_j - 1);f_forme=FGauche} in
        affiche_sprite sprite_flamme;
        affiche();
      end


(** mise en place de l'arene au départ du jeu **)
let dessiner_arene m l = 
  List.map (function (c,i,j,d) -> Printf.printf "%s %d %d %s\n%!" c i j d) l;
  for i = 0 to 9 do
    for j = 0 to 9 do
      begin
        match m.(i).(j) with
        | ' ' -> let sprite_sol = Sol (j , 9-i) in 
          affiche_sprite sprite_sol;
          Printf.printf " %!";
        | '=' -> let sprite_bloc = Bloc {blk_i = j; blk_j = 9-i;  blk_forme = Incassable } in
          affiche_sprite sprite_bloc;
          affiche();
          Printf.printf "=%!";
        | 'x' -> let sprite_bloc = Bloc {blk_i = j; blk_j = 9-i; blk_forme = Cassable(Intact) } in
          affiche_sprite sprite_bloc;
          affiche();
          Printf.printf "x%!";
        | _ -> ();
      end
    done;
    Printf.printf "\n";
  done;
  affiche();
  synchronize()

let rec mouvement x y m joueur coul dir =
  match dir with
  | Nord -> let proch_case = prochaine_case x y Nord in
    Printf.printf "x: %d, y: %d\n%!" (fst(proch_case)) (snd(proch_case));
    if m.(fst(proch_case)).(snd(proch_case)) == ' ' then 
      begin
        efface_sprite joueur;
        let joueur2 = build_bomber2 (coul, x, (y+5), Nord) in
        affiche_sprite joueur2;
        affiche();
        sleepf(1./.30.);
        mouvement x (y+5) m joueur2 coul Nord;
      end
  | Sud -> let proch_case = prochaine_case x y Sud in
    Printf.printf "x: %d, y: %d\n%!" (fst(proch_case)) (snd(proch_case));
    if m.(fst(proch_case)).(snd(proch_case)) == ' ' then 
      begin

        efface_sprite joueur;
        let joueur2 = build_bomber2 (coul, x, (y-5), Sud) in
        affiche_sprite joueur2;
        affiche();
        sleepf(1./.30.);
        mouvement x (y-5) m joueur2 coul Sud;
      end
  | Est -> let proch_case = prochaine_case x y Est in
    Printf.printf "x: %d, y: %d\n%!" (fst(proch_case)) (snd(proch_case));
    if m.(fst(proch_case)).(snd(proch_case)) == ' ' then 
      begin

        efface_sprite joueur;
        let joueur2 = build_bomber2 (coul,(x+5), y, Est) in
        affiche_sprite joueur2;
        affiche();
        sleepf(1./.30.);
        mouvement (x+5) y m joueur2 coul Est;
      end
  | Ouest -> let proch_case = prochaine_case x y Ouest in
    Printf.printf "x: %d, y: %d\n%!" (fst(proch_case)) (snd(proch_case));
    if m.(fst(proch_case)).(snd(proch_case)) == ' ' then 
      begin

        efface_sprite joueur;
        let joueur2 = build_bomber2 (coul, (x-5), y, Ouest) in
        affiche_sprite joueur2;
        affiche();
        sleepf(1./.30.);
        mouvement (x-5) y m joueur2 coul Ouest;
      end

(** controle d'un bomberman **)
let controle coul m =
  let joueur = List.find (fun s ->  match s with | Bomberman(r) -> r.couleur = coul | _ -> false) sprite_bomber in
  let Bomberman(r) = joueur in
  let x = ref r.x in
  let y = ref r.y in
  if touche_pressee() then
    (match lecture_touche() with
     | 'z' -> mouvement !x !y m joueur coul Nord
     | 'd' -> mouvement !x !y m joueur coul Est
     | 'q' -> mouvement !x !y m joueur coul Ouest
     | 's' -> mouvement !x !y m joueur coul Sud
     | 'b' -> let bombe = {b_i=coord_x_to_case !x;b_j=coord_y_to_case !y;b_duree=15} in
       affiche_explosion bombe joueur;
       affiche_flamme grille bombe Nord;
     | 'o' -> close_graph(Printf.printf "Fin du jeu!\n")
     |  _  -> ()
    );
  affiche()

let () =
  auto_synchronize false;
  ouvrir_fenetre();
  dessiner_arene grille bombers;
  affichage_bombermen_depart();
  while true do
    controle Violet grille;
  done;
  ignore (read_key ())
